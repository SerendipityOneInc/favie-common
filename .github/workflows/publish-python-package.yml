name: Publish Python Package

on:
  push:
    tags:
      - "v*.*.*"
      - "v*.*.*-alpha"
      - "v*.*.*-alpha.*"
      - "v*.*.*-beta"
      - "v*.*.*-beta.*"

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.x'
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install poetry
    - name: Set version
      run: |
        VERSION=${GITHUB_REF#refs/tags/v}
        poetry version $VERSION
    # - name: Configure Poetry
    #   run: |
    #     echo "Configuring Poetry for ${{ github.repository }}"
    #     poetry config repositories.github https://api.github.com/repos/${{ github.repository }}
    #     poetry config http-basic.github ${{ secrets.GH_RELEASE_TOKEN }} ${{ secrets.GH_RELEASE_TOKEN }}
    - name: Build and publish
      run: |
        poetry build
        # echo "Publishing to GitHub Packages..."
        # poetry publish -r github -vvv
      env:
        GITHUB_TOKEN: ${{ secrets.GH_RELEASE_TOKEN }}
    - name: Debug Information
      if: always()
      run: |
        echo "GitHub Repository: ${{ github.repository }}"
        echo "Poetry version:"
        poetry --version
        echo "Poetry configuration:"
        poetry config --list
        echo "Current directory contents:"
        ls -la
        echo "Dist directory contents:"
        ls -la dist/
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GH_RELEASE_TOKEN }}
      with:
        tag_name: ${{ github.ref_name }}
        release_name: Release ${{ github.ref_name }}
        draft: false
        prerelease: ${{ contains(github.ref, 'alpha') || contains(github.ref, 'beta') }}
    
    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GH_RELEASE_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./dist/*.whl
        asset_name: ${{ github.event.repository.name }}-${{ github.ref_name }}.whl
        asset_content_type: application/octet-stream